// *Retrieving the offsets from game-binary (Linux)
//
// StudioHdr:
//  1. StudioHdr offset can be retrieved from CBaseAnimating::GetModelPtr()
//  2. m_hLightingOrigin offset can be retrieved on runtime using the SM API, or
//     in ServerClassInit<DT_BaseAnimating::ignored>() and check the param stack on the SendProp init of m_hLightingOrigin
//  3. And lastly: offset = m_pStudioHdr - m_hLightingOrigin
//
//  One last thing, GetModelPtr() returns a CStudioHdr object, which actually acts like a kind of wrapper of the studiohdr_t object.
//  What we actually want is the pointer of the studiohdr_t object. And lucky we are, it's located as the first member of the
//  CStudioHdr class. This means that we don't need any extra offset to get the pointer from memory.
//  
// Some useful references:
// CStudioHdr: https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/public/studio.h#L2351
// studiohdr_t: https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/public/studio.h#L2062
// 
// SequenceCount:
// I believe this struct is ancient, and is never expected to change.
//
"Games"
{
	"#default"
	{
		// tf2, dod, cstrike, hl2mp
		"Offsets"
		{
			"UpdateTransmitState"
			{
				"windows"	"19"
				"linux"		"20"
			}
			"StudioHdr"
			{
				"windows"	"60"
				"linux"		"60"
			}
			"SequenceCount"
			{
				"windows"	"188"
				"linux"		"188"
			}
		}
	}
	"csgo"
	{
		"Offsets"
		{
			"UpdateTransmitState"
			{
				"windows"	"21"
				"linux"		"22"
			}
			"StudioHdr"
			{
				"windows"	"68"
				"linux"		"68"
			}
		}
	}
	"left4dead"
	{
		"Offsets"
		{
			"UpdateTransmitState"
			{
				"windows"	"18"
				"linux"		"19"
			}
			"StudioHdr"
			{
				"windows"	"40"
				"linux"		"40"
			}
		}
	}
	"left4dead2"
	{
		"Offsets"
		{
			"UpdateTransmitState"
			{
				"windows"	"20"
				"linux"		"21"
			}
			"StudioHdr"
			{
				"windows"	"3788"
				"linux"		"3784"
			}
		}
	}
}